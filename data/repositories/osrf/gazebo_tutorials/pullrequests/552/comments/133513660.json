{"links": {"self": {"href": "data/repositories/osrf/gazebo_tutorials/pullrequests/552/comments/133513660.json"}, "html": {"href": "#!/osrf/gazebo_tutorials/pull-requests/552/_/diff#comment-133513660"}}, "parent": {"id": 133501342, "links": {"self": {"href": "data/repositories/osrf/gazebo_tutorials/pullrequests/552/comments/133501342.json"}, "html": {"href": "#!/osrf/gazebo_tutorials/pull-requests/552/_/diff#comment-133501342"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 552, "links": {"self": {"href": "data/repositories/osrf/gazebo_tutorials/pullrequests/552.json"}, "html": {"href": "#!/osrf/gazebo_tutorials/pull-requests/552"}}, "title": "Using `${prefix}/lib` in package.xml plugin_path is wrong."}, "content": {"raw": "I\u2019m pretty sure there isn\u2019t any single relative path against `${prefix}` that would work in all cases. For basic packages that are located directly under `src/`, the solution suggested in !539 will work with all of catkin\\_make, catkin\\_make\\_isolated and catkin tools. As well as for install packages. But for packages that are located in some subfolder of `src/`, that approach wouldn\u2019t work.\n\nAccording to the [source](https://github.com/ros/rospack/blob/cb4c93abfccc9617578b6765f6dfeb54f9a50d71/src/rospack.cpp#L2186), `${prefix}` will always expand to the path to the package. In install spaces, that is `share/package_name`. So `${prefix}/../../lib` is `share/package_name/../../lib`, which expands to `lib`, which is correct. But in devel spaces, `${prefix}` points to the path to the package source, which may be many levels deep under `src/`. E.g. for a package located at `src/ethzasl_icp_mapping/ethzasl_icp_mapper` \\(to be concrete\\), `${prefix}/../../lib` is `src/ethzasl_icp_mapping/ethzasl_icp_mapper/../../lib`, which expands to `src/lib`, which is obviously incorrect. And we could go even deeper\u2026\n\nThe solution I propose works in all cases except when there are multiple locations for the same library and the first one found by catkin isn\u2019t correct. But that, I\u2019d say, is an ill-defined scenario. If I get it correctly, catkin\\_find should respect ROS\\_PACKAGE PATH.\n\nAnd, also, my solution doesn\u2019t work on Windows. But I don\u2019t think gazebo\\_ros\\_pkgs are supposed to work under windows anyways, are they? Solving this issue on Windows would probably need some work on the side of rospack, e.g. to provide another expansion variable for the lib folder, or for calling catkin\\_find in a platform-independent way \\(there\u2019s still the dirname we need to call, but in worst case it could be substituted by appending `/..`, although I don\u2019t like directory paths like `lib/libgazebo_realsense_plugin.so/..`\\).", "markup": "markdown", "html": "<p>I\u2019m pretty sure there isn\u2019t any single relative path against <code>${prefix}</code> that would work in all cases. For basic packages that are located directly under <code>src/</code>, the solution suggested in !539 will work with all of catkin_make, catkin_make_isolated and catkin tools. As well as for install packages. But for packages that are located in some subfolder of <code>src/</code>, that approach wouldn\u2019t work.</p>\n<p>According to the <a data-is-external-link=\"true\" href=\"https://github.com/ros/rospack/blob/cb4c93abfccc9617578b6765f6dfeb54f9a50d71/src/rospack.cpp#L2186\" rel=\"nofollow\">source</a>, <code>${prefix}</code> will always expand to the path to the package. In install spaces, that is <code>share/package_name</code>. So <code>${prefix}/../../lib</code> is <code>share/package_name/../../lib</code>, which expands to <code>lib</code>, which is correct. But in devel spaces, <code>${prefix}</code> points to the path to the package source, which may be many levels deep under <code>src/</code>. E.g. for a package located at <code>src/ethzasl_icp_mapping/ethzasl_icp_mapper</code> (to be concrete), <code>${prefix}/../../lib</code> is <code>src/ethzasl_icp_mapping/ethzasl_icp_mapper/../../lib</code>, which expands to <code>src/lib</code>, which is obviously incorrect. And we could go even deeper\u2026</p>\n<p>The solution I propose works in all cases except when there are multiple locations for the same library and the first one found by catkin isn\u2019t correct. But that, I\u2019d say, is an ill-defined scenario. If I get it correctly, catkin_find should respect ROS_PACKAGE PATH.</p>\n<p>And, also, my solution doesn\u2019t work on Windows. But I don\u2019t think gazebo_ros_pkgs are supposed to work under windows anyways, are they? Solving this issue on Windows would probably need some work on the side of rospack, e.g. to provide another expansion variable for the lib folder, or for calling catkin_find in a platform-independent way (there\u2019s still the dirname we need to call, but in worst case it could be substituted by appending <code>/..</code>, although I don\u2019t like directory paths like <code>lib/libgazebo_realsense_plugin.so/..</code>).</p>", "type": "rendered"}, "created_on": "2020-01-28T21:28:29.209062+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": "2020-01-28T21:28:29.720982+00:00", "type": "pullrequest_comment", "id": 133513660}